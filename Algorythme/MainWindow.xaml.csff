using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;
using Algorythme.MyCollections;
using System.Threading;
using System.ComponentModel;
using NAudio.Wave;

namespace Algorythme
{

    /// <summary>
    /// Logique d'interaction pour MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        class EventListener
        {
            private ListWithChangedEvent List;

            public EventListener(ListWithChangedEvent list)
            {
                List = list;
                // Add "ListChanged" to the Changed event on "List".
                List.Changed += new ChangedEventHandler(ListChanged);
            }

            // This will be called whenever the list changes.
            private void ListChanged(object sender, EventArgs e)
            {
                //Console.WriteLine("This is called when the event fires.");
            }

            public void Detach()
            {
                // Detach the event and delete the list
                List.Changed -= new ChangedEventHandler(ListChanged);
                List = null;
            }
        }
        private readonly BackgroundWorker worker = new BackgroundWorker();

        Canvas canvas = null;

        private Algorithms algo;
        private WaveOut waveOut;
        private SineWaveProvider32 sineWaveProvider = new SineWaveProvider32();
        public abstract class WaveProvider32 : IWaveProvider
        {
            private WaveFormat waveFormat;

            public WaveProvider32()
                : this(44100, 1)
            {
            }

            public WaveProvider32(int sampleRate, int channels)
            {
                SetWaveFormat(sampleRate, channels);
            }

            public void SetWaveFormat(int sampleRate, int channels)
            {
                this.waveFormat = WaveFormat.CreateIeeeFloatWaveFormat(sampleRate, channels);
            }

            public int Read(byte[] buffer, int offset, int count)
            {
                WaveBuffer waveBuffer = new WaveBuffer(buffer);
                int samplesRequired = count / 4;
                int samplesRead = Read(waveBuffer.FloatBuffer, offset / 4, samplesRequired);
                return samplesRead * 4;
            }

            public abstract int Read(float[] buffer, int offset, int sampleCount);

            public WaveFormat WaveFormat
            {
                get { return waveFormat; }
            }

        }

        public class SineWaveProvider32 : WaveProvider32
        {
            int sample;

            public SineWaveProvider32()
            {
                Frequency = 1000;
                Amplitude = 0.25f; // let's not hurt our ears            
            }

            public float Frequency { get; set; }
            public float Amplitude { get; set; }

            public override int Read(float[] buffer, int offset, int sampleCount)
            {
                int sampleRate = WaveFormat.SampleRate;
                for (int n = 0; n < sampleCount; n++)
                {
                    buffer[n + offset] = (float)(Amplitude * Math.Sin((2 * Math.PI * sample * Frequency) / sampleRate));
                    sample++;
                    if (sample >= sampleRate) sample = 0;
                }
                return sampleCount;
            }
        }

        public void StartStopSineWave()
        {
            if (waveOut == null)
            {
                sineWaveProvider.SetWaveFormat(16000, 1); // 16kHz mono
                sineWaveProvider.Frequency = 0;
                sineWaveProvider.Amplitude = 0.1f;
                waveOut = new WaveOut();
                waveOut.Init(sineWaveProvider);
                waveOut.Play();
            }
            else
            {
                waveOut.Stop();
                waveOut.Dispose();
                waveOut = null;
            }
        }

        public MainWindow()
        {
            InitializeComponent();

            worker.DoWork += worker_DoWork;
            worker.RunWorkerCompleted += worker_RunWorkerCompleted;

            algo = new Algorithms(800,30);

            EventListener tabListener = new EventListener(algo.Tab);
            algo.Tab.Changed += Tab_Changed;
        }

        private void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            Console.WriteLine("Finished sorting");
            StartStopSineWave();
        }
        private void worker_DoWork(object sender, DoWorkEventArgs e)
        {
            algo.quicksort(0, algo.TabSize-1);
            //algo.bubbleSort();
        }
        
        void Tab_Changed(object sender, EventArgs e)
        {
            var args = e as ValueChangedEventArgs;
            if (args != null)
            {
                //Console.WriteLine("Changed i: " + args.NewIndex + " : " + args.NewValue);
                if (canvas != null)
                {
                    addBars(canvas);
                    sineWaveProvider.Frequency = args.NewIndex * 10 + 700;
                }
            }
        }
        private void cbAlgos_Loaded(object sender, RoutedEventArgs e)
        {
            List<string> data = new List<String>();

            data.Add("S");
            data.Add("S2");

            var cbAlgos = sender as ComboBox;

            cbAlgos.ItemsSource = data;

            cbAlgos.SelectedIndex = 0;
        }

        private void cbAlgos_SelectionChanged(object sender, RoutedEventArgs e)
        {
        }

        private void canvas_Loaded(object sender, RoutedEventArgs e)
        {
            this.canvas = sender as Canvas;
        }
        private void canvas_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            var canvas = sender as Canvas;

            addBars(canvas);
        }

        private void addBars(Canvas canvas)
        {
                Dispatcher.BeginInvoke((Action)(() =>
                {
            int numBars = algo.TabSize;

            double actualWidth = canvas.ActualWidth;

            double rawBarWidth = (actualWidth / numBars);

            double separator = 0.5 * rawBarWidth;

            double actualBarWidth = rawBarWidth - separator;

            double leftShift = separator / 2;

            canvas.Children.Clear();
            for (int i = 0; i < numBars; i++)
            {
                var rect = new System.Windows.Shapes.Rectangle();
                rect.Stroke = new SolidColorBrush(Colors.White);
                rect.Fill = new SolidColorBrush(Colors.LightGray);
                rect.Width = actualBarWidth;
                rect.Height = canvas.ActualHeight - (numBars - 1 - (int)algo.Tab[i]) * (canvas.ActualHeight / (numBars));

                Canvas.SetLeft(rect, leftShift + (i * actualBarWidth) + (i * separator));
                canvas.Children.Add(rect);
            }
                }));

        }
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            algo.Tab.Changed -= Tab_Changed;
            algo.shuffleTab();
            algo.Tab.Changed += Tab_Changed;
            addBars(canvas);
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            if (!worker.IsBusy)
            {
                worker.RunWorkerAsync();
                StartStopSineWave();
            }
        }
    }

}
